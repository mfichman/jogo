# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Method = GET | HEAD | POST | PUT | DELETE | TRACE | CONNECT

Method::str?() String {
    # Returns the Method enumeration as a string.
    match self {
    with Method::GET: ret "GET"
    with Method::HEAD: ret "HEAD"
    with Method::POST: ret "POST"
    with Method::PUT: ret "PUT"
    with Method::DELETE: ret "DELETE"
    with Method::TRACE: ret "TRACE"
    with Method::CONNECT: ret "CONNECT"
    }
}

Request < Object {
    # The request object stores information about the type of request that will
    # be sent to the server.  Request objects may be reused multiple times for
    # efficiency.

    method var = Method::GET
    # The method to use for communication with the server.

    path var = Uri::Path('')
    # Path to the resource requested by the server.

    version var = 'HTTP/1.1'
    # HTTP version to use.

    headers = Hash[String, String]()
    # Set of headers to use with the request.  A few headers are set by
    # default, but may be overridden:
    # * Connection: close
    # * User-Agent: Jogo HTTP Client
    # * Accept-Charset: utf-8
    # * Accept-Encoding: identity

    body var String
    # Body of the request (optional)

    @init() {
        headers["Connection"] = "close"
        headers["User-Agent"] = "Jogo HTTP Client"
        headers["Accept-Charset"] = "utf-8"
        headers["Accept-Encoding"] = "identity"
    }

    write(stream Io::Stream) {
        # Outputs the request headers and optionally the body.  If the body is
        # non-nil, write will output this string as the request body.
        # Otherwise, the caller should write the body to the stream after
        # calling write().  Status of the stream should be queried after
        # completing this function.
        stream.print("#{method} #{path} #{version}\r\x0A")
        for header in headers {
            stream.print("#{header.first}: #{header.second}\r\x0A")
        }
        stream.print("\r\x0A")
        if body {
           stream.print(body)
           stream.flush()
        }
    }

    read_headers(stream Io::Stream) {
        # Read only the response headers; do not read the request body.
        m = stream.scan(' ')
        if m == 'GET' {
            method = Method::GET
        } else if m == 'HEAD' {
            method = Method::HEAD
        } else if m == 'POST' {
            method = Method::POST
        } else if m == 'PUT' {
            method = Method::PUT
        } else if m == 'DELETE' {
            method = Method::DELETE
        } else if m == 'TRACE' {
            method = Method::TRACE
        } else if m == 'CONNECT' {
            method = Method::CONNECT
        }
        path = Uri::Path(stream.scan(' '))
        version = stream.scan('\n')
        while stream.status == Io::StreamStatus::OK and
            stream.peek() != '\r'b and
            stream.peek() != '\n'b {

            key = stream.scan(':')
            while stream.status == Io::StreamStatus::OK and
                stream.peek() == ' 'b  {

                stream.get()
            }
            value = stream.scan('\n')
            headers[key] = value
        }
        stream.scan('\n')
    }

    read(stream Io::Stream) {
        # Reads the whole request, including the body.
        self.read_headers(stream)
        if self.method != Method::GET {
            body = stream.readall()
        }
    }
}

