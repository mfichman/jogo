# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Response < Object {
    # Parses and stores an HTTP response.  The headers are read first, and the
    # remaining data is stored in the 'data' attribute.

    status var Status
    # The status of the request.

    version var = 'HTTP/1.1'
    # HTTP version to use.

    headers = Hash[String,String]()
    # Set of response headers read from the server.

    body var String
    # Body of the request (following the headers).

    @init() {
    }

    write(stream Io::Stream) {
        # Write a response to the output stream.
        stream.print("#{version} #{status.int} WHATEV\r\x0A")
        for header in headers {
            stream.print("#{header.first}: #{header.second}\r\x0A")
        }
        stream.print("\r\x0A")
        if body {
           stream.print(body)
           stream.flush()
        }
    }

    read_headers(stream Io::Stream) {
        # Read only the response headers; do not read the request body.
        version = stream.scan(' ')
        stat = stream.scan(' ')
        message = stream.scan('\n')
        while stream.status == Io::StreamStatus::OK and
            stream.peek() != '\r'b and
            stream.peek() != '\n'b  {

            key = stream.scan(':')
            while stream.status == Io::StreamStatus::OK and
                stream.peek() == ' 'b {

                stream.get()
            }
            value = stream.scan('\n')
            headers[key] = value
        }
        stream.scan('\n')
    }

    read(stream Io::Stream) {
        # Reads a response from the stream.
        self.read_headers(stream)
        body = stream.readall()
    }
}

Status < Enum {
    # Encodes an HTTP status value.  The first code below ("UNKNOWN") is used
    # to indicate an invalid status code returned by the server.
    INVALID_CODE = 0
    CONTINUE = 100
    SWITCHING_PROTOCOLS = 101
    OK = 200
    CREATED = 201
    ACCEPTED = 202
    NON_AUTHORITATIVE_INFO = 203
    NO_CONTENT = 204
    RESET_CONTENT = 205
    PARTIAL_CONTENT = 206
    MULTIPLE_CHOICES = 300
    MOVED_PERMANENTLY = 301
    FOUND = 302
    SEE_OTHER = 303
    NOT_MODIFIED = 304
    USE_PROXY = 305
    TEMPORARY_REDIRECT = 307
    BAD_REQUEST = 400
    UNAUTHORIZED = 401
    PAYMENT_REQUIRED = 402
    FORBIDDEN = 403
    NOT_FOUND = 404
    METHOD_NOT_ALLOWED = 405
    NOT_ACCEPTABLE = 406
    PROXY_AUTHENTICATION_REQUIRED = 407
    REQUEST_TIMEOUT = 408
    CONFLICT = 409
    GONE = 410
    LENGTH_REQUIRED = 411
    PRECONDITION_FAILED = 412
    REQUEST_ENTITY_TOO_LARGE = 413
    UNSUPPORTED_MEDIA_TYPE = 415
    REQUESTED_RANGE_NOT_SATISFIABLE = 416
    EXPECTATION_FAILED = 417
    INTERNAL_SERVER_ERROR = 500
    NOT_IMPLEMENTED = 501
    BAD_GATEWAY = 502
    SERVICE_UNAVAILABLE = 503
    GATEWAY_TIMEOUT = 504
    VERSION_NOT_SUPPORTED = 505

    int?() native Int { }
}

