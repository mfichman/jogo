#!/usr/bin/python

# Parallel test execution script for the Jogo compiler.  This script finds all
# test files in the 'tests' folder, and then executes them in parallel.

import optparse
import os
import subprocess
import re
import sys
import glob
import difflib
import multiprocessing
import platform

parser = optparse.OptionParser(description="Run compiler and runtime tests.")
parser.add_option('-f', '--full', action='store_true', 
    help='Run all tests, including memcheck')
parser.add_option('-v', '--verbose', action='store_true',  
    help='Print test status')
parser.add_option('-s', '--serial', action='store_true',
    help='Run tests serially')
(options, tests) = parser.parse_args()

os.chdir('tests')

PASS, FAIL = range(2)

def check(test, expected, output):
    # Checks to make sure the output for the test matches the expected output.
    expected = expected.replace('\r', '')
    output = output.replace('\r', '')
    if output != expected:
        result = []
        result.append(''.join(['-' for i in range(79)]))
        result.append('FAILED: ' + test)
        result.append(''.join(['-' for i in range(79)]))
        expected_lines = expected.split('\n')
        output_lines = output.split('\n')
        result.append('\n'.join(difflib.unified_diff(
            expected_lines, 
            output_lines, 
            lineterm='',
            fromfile='Expected output',
            tofile='Actual output')))
        result.append(''.join(['-' for i in range(79)]))
        result = '\n'.join(result)
        return (FAIL, result)
    else:
        return (PASS, test)

def shell(command, check=False):
    # Runs 'command' and returns the result.  Sets the 'fail' flag if the 
    # command failed.
    print(command)
    proc = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, encoding='utf-8')
    ret = proc.stdout.read()
    code = proc.wait()
    if code != 0 and check:
        return ret + "\nInvalid exit status: %d" % code
    else:
        return ret 

def jogo_test(test):
    # Run a compilation test.  Compile and Jogo source file, and potentially
    # run the resulting program.
    test = re.sub(r'.jg$', '', test)
    flags = ""
    run = False
    for line in open(test + '.jg', encoding='utf-8'):
        if re.search(r'^#.jgtest print_ast on', line):
            flags += ' --dump-ast'
        elif re.search(r'^#.jgtest print_ir on', line):
            flags += ' --dump-ir'
        elif re.search(r'^#.jgtest exec on', line):
            flags += ' -e'
            run = True
        
    flags += ' --build-dir ../build/test -o ../bin/test/%s' % (test.lower())
    command = '../bin/jogo %s -i ../runtime -i ../lib %s' % (test, flags)
    expected = open(test + '.jg.out', 'r', encoding='utf-8').read() 
    if sys.platform == 'win32':
        command = command.replace('/', '\\')

    if run and options.full:
        configs = [
            "-g Nasm64", "-g Nasm64 --optimize",
            "-g Intel64", "-g Intel64 --optimize",
        ]
    else:
        configs = ["-g Intel64 --optimize"]
        #configs = ["-g C"]
        #kconfigs = ["-g Nasm64 --optimize"]

    message = []
    status = PASS
    for config in configs:
        output = shell('%s %s 2>&1' % (command, config), run)
        result = check('%s.jg %s' % (test, config), expected, output)
        if result[0] == FAIL:
            status = FAIL
            message.append(result[1])
    if status == PASS:
        message = ['%s.jg' % test]
    return (status, '\n'.join(message))
    

def python_test(test):
    # Run a Python test.  Useful for various miscellaneous tests that are not
    # easily expressed in C++.
    expected = open(test + '.out', 'r', encoding='utf-8').read()
    output = shell('python ' + test + ' 2>&1')
    return check(test, expected, output)

def native_test(test):
    # C/C++ tests.  Used primarily for unit tests and to test the runtime
    # library.
    expected = open(test + '.out', 'r', encoding='utf-8').read()
    exe = re.sub(r'.c$', '', test)
    output = ""
    if sys.platform == 'win32':
        command = 'cl ' + test + ' /MD /Fe..\\build\\' + exe + ' /I:.. jogo.lib '
        command += '/link /LIBPATH:..\\lib ws2_32.lib 2>&1'
        err = os.popen(command).read()
        output = shell('..\\build\\' + exe + ' 2>&1')
    else:
        command = 'gcc -g ' + test + ' -o ../build/' + exe + ' -L../lib '
        command += '../lib/jogo.a -lm -I .. 2>&1'
        err = os.popen(command).read()
        output += shell('../build/' + exe + ' 2>&1')
    (res, msg) = check(test, expected, output)
    if res == FAIL: return (res, msg+err)
    else: return (res, msg)

def cpp_test(test):
    # C++ tests; used for compiler unit tests.
    expected = open(test + '.out', 'r', encoding='utf-8').read()
    exe = re.sub(r'.cpp$', '', test) 
    output = ""
    if sys.platform == 'win32':
        command = 'cl ' + test + ' /MT /TP /Zi /EHsc /Fe..\\build\\' 
        command += exe + ' /I..\\compiler '
        command += '/link /LIBPATH:..\\lib '
        command += 'jogoc.lib' 
        err = os.popen(command).read()
        output = shell('..\\build\\' + exe + ' 2>&1')
    else:
        command = 'g++ -g ' + test + ' -o ../build/' + exe + ' -L../lib '
        command += '-ljogoc -lm -I ../compiler 2>&1'
        output += os.popen(command).read()
        output += shell('../build/' + exe + ' 2>&1')
        err = ''
    
    (res, msg) =  check(test, expected, output)
    if res == FAIL: return (res, msg+err)
    else: return (res, msg)

def any_test(test):
    # Runs a C++ test and returns the result of the test.
    if re.search(r'.jg$', test):
        return jogo_test(test)
    elif re.search(r'.py$', test):
        return python_test(test)
    elif re.search(r'.c$', test) and not os.path.exists(test[:-2]+".jg"):
        return native_test(test)
    elif re.search(r'.cpp$', test):
        return cpp_test(test)
    else:
        return (None, '')

total = 0
failed = 0

def print_result(result):
    # Prints the result of a test.  This is function is a callback used by the
    # multiprocessing pool to print results as they become available.
    global total 
    global failed 
    status, message = result
    if status == FAIL:
        print(message)
        failed += 1
        total += 1
    elif status == PASS:
        print(message)
        total += 1
     
if len(tests) == 0:
    # If no tests are passed as parameters, then glob on the test dir to run 
    # all the tests.
    tests += glob.glob('*.jg')
    tests += glob.glob('*.c') 
    tests += glob.glob('*.py')
    tests += glob.glob('*.cpp')

# Iterate through all the tests, and run the correct callback for each test
# type.
if options.serial or platform.system() == "Windows":
    for test in tests:
        print_result(any_test(test))
else:
    pool = multiprocessing.Pool(multiprocessing.cpu_count() * 2)
    for test in tests:
        pool.apply_async(any_test, [test], callback=print_result)
    pool.close()
    pool.join()

if failed > 0:
    # Finally, check for errors.  If there was an error, exit with code 1 to
    # stop the whole build.
    if total == 1:
        print('Test failed.')
    else:
        print(str(failed) + ' out of ' + str(total) + ' tests failed.')
    sys.exit(1)
else:
    if total == 1:
        print('Test passed.')
    else:
        print('All ' + str(total) + ' tests passed.')
        
